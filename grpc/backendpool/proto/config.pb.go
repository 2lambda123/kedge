// Code generated by protoc-gen-go.
// source: config.proto
// DO NOT EDIT!

package mwitkow_grpcproxy_backendpool

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / Config is the top level configuration message for a backend pool.
type Config struct {
	TlsServerConfigs []*TlsServerConfig `protobuf:"bytes,1,rep,name=tls_server_configs,json=tlsServerConfigs" json:"tls_server_configs,omitempty"`
	Backends         []*Backend         `protobuf:"bytes,3,rep,name=backends" json:"backends,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Config) GetTlsServerConfigs() []*TlsServerConfig {
	if m != nil {
		return m.TlsServerConfigs
	}
	return nil
}

func (m *Config) GetBackends() []*Backend {
	if m != nil {
		return m.Backends
	}
	return nil
}

type TlsServerConfig struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *TlsServerConfig) Reset()                    { *m = TlsServerConfig{} }
func (m *TlsServerConfig) String() string            { return proto.CompactTextString(m) }
func (*TlsServerConfig) ProtoMessage()               {}
func (*TlsServerConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *TlsServerConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "mwitkow.grpcproxy.backendpool.Config")
	proto.RegisterType((*TlsServerConfig)(nil), "mwitkow.grpcproxy.backendpool.TlsServerConfig")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xcd, 0x2d, 0xcf, 0x2c, 0xc9, 0xce,
	0x2f, 0xd7, 0x4b, 0x2f, 0x2a, 0x48, 0x2e, 0x28, 0xca, 0xaf, 0xa8, 0xd4, 0x4b, 0x4a, 0x4c, 0xce,
	0x4e, 0xcd, 0x4b, 0x29, 0xc8, 0xcf, 0xcf, 0x91, 0xe2, 0x85, 0x72, 0x20, 0xaa, 0x95, 0x56, 0x31,
	0x72, 0xb1, 0x39, 0x83, 0xb5, 0x0b, 0xc5, 0x70, 0x09, 0x95, 0xe4, 0x14, 0xc7, 0x17, 0xa7, 0x16,
	0x95, 0xa5, 0x16, 0xc5, 0x43, 0xcc, 0x2c, 0x96, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x36, 0xd2, 0xd3,
	0xc3, 0x6b, 0xaa, 0x5e, 0x48, 0x4e, 0x71, 0x30, 0x58, 0x1f, 0xc4, 0xac, 0x20, 0x81, 0x12, 0x54,
	0x81, 0x62, 0x21, 0x27, 0x2e, 0x0e, 0xa8, 0x86, 0x62, 0x09, 0x66, 0xb0, 0x99, 0x6a, 0x04, 0xcc,
	0x74, 0x82, 0xb0, 0x83, 0xe0, 0xfa, 0x94, 0x54, 0xb9, 0xf8, 0xd1, 0x2c, 0x12, 0x12, 0xe2, 0x62,
	0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x93, 0xd8, 0xc0,
	0x5e, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xba, 0x62, 0x79, 0x18, 0x01, 0x00, 0x00,
}
