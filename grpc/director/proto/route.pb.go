// Code generated by protoc-gen-go.
// source: route.proto
// DO NOT EDIT!

package mwitkow_grpcproxy_director

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / Backend is a gRPC ClientConn pool maintained to a single serivce.
type Route struct {
	// / backend_name is the string identifying the backend to send data to.
	BackendName string `protobuf:"bytes,1,opt,name=backend_name,json=backendName" json:"backend_name,omitempty"`
	// / service_name_matcher is a globbing expression that matches a full gRPC service name.
	// / For example a method call to 'com.example.MyService/Create' would be matched by:
	// /  - com.example.MyService
	// /  - com.example.*
	// /  - com.*
	// /  - *
	ServiceNameMatcher string `protobuf:"bytes,2,opt,name=service_name_matcher,json=serviceNameMatcher" json:"service_name_matcher,omitempty"`
	// / authority_matcher matches on the ':authority' header (a.k.a. Host header) enabling Virtual Host-like proxying.
	// / The matching is done through lower-case string-equality.
	// / If none are present, the route skips ':authority' checks.
	AuthorityMatcher string `protobuf:"bytes,3,opt,name=authority_matcher,json=authorityMatcher" json:"authority_matcher,omitempty"`
	// / metadata_matcher matches any gRPC inbound request metadata.
	// / Eeach key provided must find a match for the route to match.
	// / The matching is done through lower-case key match and explicit string-equality of values.
	// / If a given metadata entry has more than one string value, at least one of them needs to match.
	// / If none are present, the route skips metadata checks.
	MetadataMatcher map[string]string `protobuf:"bytes,4,rep,name=metadata_matcher,json=metadataMatcher" json:"metadata_matcher,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Route) GetBackendName() string {
	if m != nil {
		return m.BackendName
	}
	return ""
}

func (m *Route) GetServiceNameMatcher() string {
	if m != nil {
		return m.ServiceNameMatcher
	}
	return ""
}

func (m *Route) GetAuthorityMatcher() string {
	if m != nil {
		return m.AuthorityMatcher
	}
	return ""
}

func (m *Route) GetMetadataMatcher() map[string]string {
	if m != nil {
		return m.MetadataMatcher
	}
	return nil
}

func init() {
	proto.RegisterType((*Route)(nil), "mwitkow.grpcproxy.director.Route")
}

func init() { proto.RegisterFile("route.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0xd0, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0x07, 0x70, 0xda, 0x3a, 0xc1, 0x57, 0xc1, 0x1a, 0x7a, 0x18, 0x3b, 0x4d, 0x4f, 0x03, 0x21,
	0x88, 0x82, 0x88, 0x47, 0xc1, 0xe3, 0x3c, 0xf4, 0x0b, 0x8c, 0xb7, 0xf4, 0xe1, 0x4a, 0x4d, 0x53,
	0x9e, 0xaf, 0x9b, 0xf9, 0x56, 0x7e, 0x44, 0x69, 0x16, 0x0b, 0x82, 0xde, 0x92, 0xf7, 0xff, 0x25,
	0xe4, 0x1f, 0xc8, 0xd9, 0x0d, 0x42, 0xba, 0x67, 0x27, 0x4e, 0x2d, 0xec, 0xa1, 0x91, 0xd6, 0x1d,
	0xf4, 0x1b, 0xf7, 0xa6, 0x67, 0xf7, 0xe9, 0x75, 0xdd, 0x30, 0x19, 0x71, 0x7c, 0xfd, 0x95, 0xc2,
	0xac, 0x1a, 0xad, 0xba, 0x82, 0xf3, 0x2d, 0x9a, 0x96, 0xba, 0x7a, 0xd3, 0xa1, 0xa5, 0x79, 0xb2,
	0x4c, 0x56, 0x67, 0x55, 0x1e, 0x67, 0xaf, 0x68, 0x49, 0xdd, 0x42, 0xf9, 0x41, 0xbc, 0x6f, 0x0c,
	0x05, 0xb2, 0xb1, 0x28, 0x66, 0x47, 0x3c, 0x4f, 0x03, 0x55, 0x31, 0x1b, 0xe9, 0xfa, 0x98, 0xa8,
	0x1b, 0xb8, 0xc4, 0x41, 0x76, 0x8e, 0x1b, 0xf1, 0x13, 0xcf, 0x02, 0x2f, 0xa6, 0xe0, 0x07, 0x23,
	0x14, 0x96, 0x04, 0x6b, 0x14, 0x9c, 0xec, 0xc9, 0x32, 0x5b, 0xe5, 0x77, 0x0f, 0xfa, 0xff, 0x0a,
	0x3a, 0x3c, 0x5f, 0xaf, 0xe3, 0xc9, 0x78, 0xd9, 0x4b, 0x27, 0xec, 0xab, 0x0b, 0xfb, 0x7b, 0xba,
	0x78, 0x86, 0xf2, 0x2f, 0xa8, 0x0a, 0xc8, 0x5a, 0xf2, 0xb1, 0xf3, 0xb8, 0x54, 0x25, 0xcc, 0xf6,
	0xf8, 0x3e, 0x50, 0x2c, 0x77, 0xdc, 0x3c, 0xa5, 0x8f, 0xc9, 0xf6, 0x34, 0xfc, 0xea, 0xfd, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x59, 0xec, 0xda, 0x64, 0x01, 0x00, 0x00,
}
