// Code generated by protoc-gen-go.
// source: kfe/config/common/resolvers/resolvers.proto
// DO NOT EDIT!

/*
Package kfe_config_common_resolvers is a generated protocol buffer package.

It is generated from these files:
	kfe/config/common/resolvers/resolvers.proto

It has these top-level messages:
	SrvResolver
	KubeResolver
*/
package kfe_config_common_resolvers

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// / SrvBackend describes a gRPC backend that is resolved and load balanced using SRV.
type SrvResolver struct {
	// / dns_name specifies the address to look up using DNS SRV. Needs to be a FQDN.
	// / E.g. "_grpc._tcp.someservice.somenamespace.svc.cluster.local"
	DnsName string `protobuf:"bytes,2,opt,name=dns_name,json=dnsName" json:"dns_name,omitempty"`
}

func (m *SrvResolver) Reset()                    { *m = SrvResolver{} }
func (m *SrvResolver) String() string            { return proto.CompactTextString(m) }
func (*SrvResolver) ProtoMessage()               {}
func (*SrvResolver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SrvResolver) GetDnsName() string {
	if m != nil {
		return m.DnsName
	}
	return ""
}

// / KubeResolver uses the Kubernetes Endpoints API to identify the service.
// / It requires the job to run inside a K8S pod and uses the pod's credentails to fetch the service information.
type KubeResolver struct {
	// / namespace is the k8s namespace to use.
	// / If unset, it deafults to 'deafult'.
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	// / service_name is the k8s service name to use.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	// / port_name is the name of the port to bind in the service.
	PortName string `protobuf:"bytes,3,opt,name=port_name,json=portName" json:"port_name,omitempty"`
}

func (m *KubeResolver) Reset()                    { *m = KubeResolver{} }
func (m *KubeResolver) String() string            { return proto.CompactTextString(m) }
func (*KubeResolver) ProtoMessage()               {}
func (*KubeResolver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KubeResolver) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *KubeResolver) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *KubeResolver) GetPortName() string {
	if m != nil {
		return m.PortName
	}
	return ""
}

func init() {
	proto.RegisterType((*SrvResolver)(nil), "kfe.config.common.resolvers.SrvResolver")
	proto.RegisterType((*KubeResolver)(nil), "kfe.config.common.resolvers.KubeResolver")
}

func init() { proto.RegisterFile("kfe/config/common/resolvers/resolvers.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0xce, 0x41, 0x0b, 0x82, 0x30,
	0x14, 0x07, 0x70, 0x2c, 0x28, 0x7d, 0x7a, 0xda, 0xc9, 0xb0, 0x43, 0x79, 0x12, 0x82, 0x79, 0xe8,
	0x63, 0x04, 0x1d, 0xec, 0x03, 0x84, 0xce, 0x67, 0x88, 0x6e, 0x4f, 0x36, 0xf3, 0xf3, 0xc7, 0x9c,
	0x68, 0xb7, 0xed, 0xff, 0xff, 0xf1, 0xe7, 0xc1, 0xad, 0x6b, 0x30, 0x17, 0xa4, 0x9a, 0xf6, 0x93,
	0x0b, 0x92, 0x92, 0x54, 0xae, 0xd1, 0x50, 0x3f, 0xa1, 0x36, 0xdb, 0x8b, 0x0f, 0x9a, 0x46, 0x62,
	0x49, 0xd7, 0x20, 0x77, 0x98, 0x3b, 0xcc, 0x57, 0x92, 0x66, 0x10, 0xbe, 0xf4, 0x54, 0x2c, 0x7f,
	0x76, 0x02, 0xbf, 0x56, 0xe6, 0xad, 0x4a, 0x89, 0xf1, 0xee, 0xe2, 0x65, 0x41, 0x71, 0xac, 0x95,
	0x79, 0x96, 0x12, 0xd3, 0x1e, 0xa2, 0xc7, 0xb7, 0xc2, 0x95, 0x9e, 0x21, 0xb0, 0xcc, 0x0c, 0xa5,
	0xc0, 0xd8, 0x9b, 0xed, 0x16, 0xb0, 0x2b, 0x44, 0x06, 0xf5, 0xd4, 0x0a, 0xfc, 0x1f, 0x0b, 0x97,
	0xcc, 0x0e, 0xb2, 0x04, 0x82, 0x81, 0xf4, 0xe8, 0xfa, 0xfd, 0xdc, 0xfb, 0x36, 0xb0, 0x65, 0x75,
	0x98, 0x6f, 0xbf, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xcb, 0x43, 0xda, 0xea, 0x00, 0x00,
	0x00,
}
