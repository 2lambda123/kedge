// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kedge/config/director.proto

package kedge_config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mwitkow/go-proto-validators"
import kedge_config_common "github.com/improbable-eng/kedge/protogen/kedge/config/common"
import kedge_config_grpc_routes "github.com/improbable-eng/kedge/protogen/kedge/config/grpc/routes"
import kedge_config_http_routes "github.com/improbable-eng/kedge/protogen/kedge/config/http/routes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / DirectorConfig is the top level configuration message the director.
type DirectorConfig struct {
	Grpc *DirectorConfig_Grpc `protobuf:"bytes,1,opt,name=grpc" json:"grpc,omitempty"`
	Http *DirectorConfig_Http `protobuf:"bytes,2,opt,name=http" json:"http,omitempty"`
}

func (m *DirectorConfig) Reset()                    { *m = DirectorConfig{} }
func (m *DirectorConfig) String() string            { return proto.CompactTextString(m) }
func (*DirectorConfig) ProtoMessage()               {}
func (*DirectorConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *DirectorConfig) GetGrpc() *DirectorConfig_Grpc {
	if m != nil {
		return m.Grpc
	}
	return nil
}

func (m *DirectorConfig) GetHttp() *DirectorConfig_Http {
	if m != nil {
		return m.Http
	}
	return nil
}

type DirectorConfig_Grpc struct {
	Routes []*kedge_config_grpc_routes.Route `protobuf:"bytes,1,rep,name=routes" json:"routes,omitempty"`
}

func (m *DirectorConfig_Grpc) Reset()                    { *m = DirectorConfig_Grpc{} }
func (m *DirectorConfig_Grpc) String() string            { return proto.CompactTextString(m) }
func (*DirectorConfig_Grpc) ProtoMessage()               {}
func (*DirectorConfig_Grpc) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *DirectorConfig_Grpc) GetRoutes() []*kedge_config_grpc_routes.Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

type DirectorConfig_Http struct {
	Routes     []*kedge_config_http_routes.Route `protobuf:"bytes,1,rep,name=routes" json:"routes,omitempty"`
	AdhocRules []*kedge_config_common.Adhoc      `protobuf:"bytes,2,rep,name=adhoc_rules,json=adhocRules" json:"adhoc_rules,omitempty"`
}

func (m *DirectorConfig_Http) Reset()                    { *m = DirectorConfig_Http{} }
func (m *DirectorConfig_Http) String() string            { return proto.CompactTextString(m) }
func (*DirectorConfig_Http) ProtoMessage()               {}
func (*DirectorConfig_Http) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 1} }

func (m *DirectorConfig_Http) GetRoutes() []*kedge_config_http_routes.Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *DirectorConfig_Http) GetAdhocRules() []*kedge_config_common.Adhoc {
	if m != nil {
		return m.AdhocRules
	}
	return nil
}

func init() {
	proto.RegisterType((*DirectorConfig)(nil), "kedge.config.DirectorConfig")
	proto.RegisterType((*DirectorConfig_Grpc)(nil), "kedge.config.DirectorConfig.Grpc")
	proto.RegisterType((*DirectorConfig_Http)(nil), "kedge.config.DirectorConfig.Http")
}

func init() { proto.RegisterFile("kedge/config/director.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0xc6, 0x69, 0x2d, 0x3d, 0xa4, 0xe2, 0xa1, 0xa7, 0x52, 0x0f, 0xad, 0x82, 0xb0, 0x97, 0x4d,
	0x60, 0x05, 0x3d, 0x88, 0x88, 0x7f, 0x40, 0xcf, 0x7d, 0x01, 0xe9, 0xa6, 0xb5, 0x2d, 0xbb, 0xdd,
	0x09, 0xe9, 0xd4, 0xbd, 0xf8, 0x8a, 0x3e, 0x83, 0xe0, 0x93, 0xc8, 0xa4, 0x41, 0x0d, 0x14, 0xf4,
	0x94, 0x42, 0x7e, 0xdf, 0xef, 0xeb, 0x4c, 0xd8, 0xf1, 0xa6, 0xae, 0x9a, 0x5a, 0x48, 0xd8, 0xbd,
	0x74, 0x8d, 0xa8, 0x3a, 0x5d, 0x4b, 0x04, 0xcd, 0x95, 0x06, 0x84, 0xf8, 0xd0, 0x5c, 0xf2, 0xe9,
	0x32, 0xbd, 0x68, 0x3a, 0x6c, 0xc7, 0x35, 0x97, 0xd0, 0x8b, 0x7e, 0xdf, 0xe1, 0x06, 0xf6, 0xa2,
	0x81, 0xa5, 0x41, 0x97, 0xaf, 0xe5, 0xb6, 0xab, 0x4a, 0x04, 0x3d, 0x88, 0xef, 0xcf, 0xc9, 0x92,
	0x66, 0x4e, 0x85, 0x84, 0xbe, 0x87, 0x9d, 0x28, 0xab, 0x16, 0xa4, 0x05, 0xce, 0x1c, 0xa0, 0xd1,
	0x4a, 0x0a, 0x0d, 0x23, 0xd6, 0x83, 0x3d, 0x66, 0xb1, 0x16, 0x51, 0xcd, 0x61, 0xa7, 0xef, 0x3e,
	0x3b, 0x7a, 0xb0, 0x73, 0xdc, 0x1b, 0x36, 0xbe, 0x66, 0x01, 0x59, 0x13, 0x2f, 0xf7, 0x16, 0xd1,
	0xea, 0x84, 0xff, 0x1e, 0x8b, 0xbb, 0x2c, 0x7f, 0xd4, 0x4a, 0xde, 0x85, 0x9f, 0x1f, 0x99, 0x9f,
	0x7b, 0x85, 0x89, 0x51, 0x9c, 0xda, 0x12, 0xff, 0x1f, 0xf1, 0x27, 0x44, 0xf5, 0x13, 0xa7, 0x58,
	0x7a, 0xc3, 0x02, 0x92, 0xc6, 0x97, 0x2c, 0x9c, 0x7e, 0x34, 0xf1, 0xf2, 0x83, 0x45, 0xb4, 0xca,
	0x5c, 0x11, 0x55, 0x71, 0x3b, 0x49, 0x41, 0x47, 0x61, 0xf1, 0xf4, 0x8d, 0x05, 0xa4, 0xfd, 0x4b,
	0x40, 0x65, 0xb3, 0x82, 0xf8, 0x8a, 0x45, 0x66, 0xdf, 0xcf, 0x7a, 0xdc, 0xd6, 0x43, 0xe2, 0x9b,
	0x74, 0xea, 0xa6, 0xa7, 0x77, 0xe1, 0xb7, 0xc4, 0x15, 0xcc, 0xe0, 0x05, 0xd1, 0xeb, 0xd0, 0xac,
	0xf5, 0xfc, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x82, 0x90, 0x96, 0xcc, 0x2a, 0x02, 0x00, 0x00,
}
