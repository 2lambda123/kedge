// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kedge/config/common/adhoc.proto

/*
Package kedge_config_common is a generated protocol buffer package.

It is generated from these files:
	kedge/config/common/adhoc.proto

It has these top-level messages:
	Adhoc
*/
package kedge_config_common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// / Adhoc describes an adhoc proxying method that is not backed by a backend, but dials a "free form" DNS record.
type Adhoc struct {
	// / dns_name_matcher matches the hostname that will be resolved using A or SRV records.
	// / The names are matched with a * prefix. For example:
	// / - *.pod.cluster.local
	// / - *.my_namespace.svc.cluster.local
	// / - *.local
	// / The first rule that matches a DNS name will be used, and its ports will be checked.
	DnsNameMatcher string `protobuf:"bytes,1,opt,name=dns_name_matcher,json=dnsNameMatcher" json:"dns_name_matcher,omitempty"`
	// / Port controls the :port behaviour of the URI requested.
	Port *Adhoc_Port `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
}

func (m *Adhoc) Reset()                    { *m = Adhoc{} }
func (m *Adhoc) String() string            { return proto.CompactTextString(m) }
func (*Adhoc) ProtoMessage()               {}
func (*Adhoc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Adhoc) GetDnsNameMatcher() string {
	if m != nil {
		return m.DnsNameMatcher
	}
	return ""
}

func (m *Adhoc) GetPort() *Adhoc_Port {
	if m != nil {
		return m.Port
	}
	return nil
}

// / Port controls how the :port part of the URI is processed.
type Adhoc_Port struct {
	// / default is the default port used if no entry is present.
	// / This defaults to 80.
	Default uint32 `protobuf:"varint,1,opt,name=default" json:"default,omitempty"`
	// / allowed ports is a list of whitelisted ports that this Adhoc rule will allow.
	Allowed []uint32 `protobuf:"varint,3,rep,packed,name=allowed" json:"allowed,omitempty"`
	// / allowed_ranges is a list of whitelisted port ranges that this Adhoc rule will allow.
	AllowedRanges []*Adhoc_Port_Range `protobuf:"bytes,4,rep,name=allowed_ranges,json=allowedRanges" json:"allowed_ranges,omitempty"`
}

func (m *Adhoc_Port) Reset()                    { *m = Adhoc_Port{} }
func (m *Adhoc_Port) String() string            { return proto.CompactTextString(m) }
func (*Adhoc_Port) ProtoMessage()               {}
func (*Adhoc_Port) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Adhoc_Port) GetDefault() uint32 {
	if m != nil {
		return m.Default
	}
	return 0
}

func (m *Adhoc_Port) GetAllowed() []uint32 {
	if m != nil {
		return m.Allowed
	}
	return nil
}

func (m *Adhoc_Port) GetAllowedRanges() []*Adhoc_Port_Range {
	if m != nil {
		return m.AllowedRanges
	}
	return nil
}

type Adhoc_Port_Range struct {
	// / from is an inclusive lower bound for the port range
	From uint32 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	// / to is an inclusive upper bound for the port range
	To uint32 `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
}

func (m *Adhoc_Port_Range) Reset()                    { *m = Adhoc_Port_Range{} }
func (m *Adhoc_Port_Range) String() string            { return proto.CompactTextString(m) }
func (*Adhoc_Port_Range) ProtoMessage()               {}
func (*Adhoc_Port_Range) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0, 0} }

func (m *Adhoc_Port_Range) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Adhoc_Port_Range) GetTo() uint32 {
	if m != nil {
		return m.To
	}
	return 0
}

func init() {
	proto.RegisterType((*Adhoc)(nil), "kedge.config.common.Adhoc")
	proto.RegisterType((*Adhoc_Port)(nil), "kedge.config.common.Adhoc.Port")
	proto.RegisterType((*Adhoc_Port_Range)(nil), "kedge.config.common.Adhoc.Port.Range")
}

func init() { proto.RegisterFile("kedge/config/common/adhoc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x5b, 0x4a, 0xc4, 0x30,
	0x14, 0x86, 0xe9, 0x65, 0x14, 0xcf, 0xd0, 0x22, 0xf1, 0x25, 0xcc, 0xcb, 0x14, 0x41, 0x28, 0x08,
	0x29, 0xcc, 0xac, 0xc0, 0x77, 0x15, 0xc9, 0x06, 0x4a, 0x6c, 0xd2, 0x8e, 0xd8, 0xe4, 0x0c, 0x69,
	0xc4, 0xdd, 0xb8, 0x0b, 0xf7, 0x27, 0x39, 0x8d, 0x6f, 0x82, 0x6f, 0xff, 0x97, 0xf3, 0xe5, 0xcf,
	0x05, 0xf6, 0xef, 0x46, 0x4f, 0xa6, 0x1b, 0xd0, 0x8d, 0x6f, 0x53, 0x37, 0xa0, 0xb5, 0xe8, 0x3a,
	0xa5, 0x4f, 0x38, 0x88, 0xb3, 0xc7, 0x80, 0xec, 0x86, 0x04, 0xb1, 0x0a, 0x62, 0x15, 0x6e, 0xbf,
	0x72, 0xd8, 0x3c, 0x44, 0x89, 0xb5, 0x70, 0xad, 0xdd, 0xd2, 0x3b, 0x65, 0x4d, 0x6f, 0x55, 0x18,
	0x4e, 0xc6, 0xf3, 0xac, 0xc9, 0xda, 0x2b, 0x59, 0x6b, 0xb7, 0x3c, 0x2b, 0x6b, 0x9e, 0xd6, 0x55,
	0x76, 0x84, 0xf2, 0x8c, 0x3e, 0xf0, 0xbc, 0xc9, 0xda, 0xed, 0x61, 0x2f, 0xfe, 0xe8, 0x15, 0xd4,
	0x29, 0x5e, 0xd0, 0x07, 0x49, 0xf2, 0xee, 0x3b, 0x83, 0x32, 0x22, 0xe3, 0x70, 0xa9, 0xcd, 0xa8,
	0x3e, 0xe6, 0x40, 0xf5, 0x95, 0xfc, 0xc5, 0x38, 0x51, 0xf3, 0x8c, 0x9f, 0x46, 0xf3, 0xa2, 0x29,
	0xe2, 0x24, 0x21, 0x7b, 0x84, 0x3a, 0xc5, 0xde, 0x2b, 0x37, 0x99, 0x85, 0x97, 0x4d, 0xd1, 0x6e,
	0x0f, 0x77, 0xff, 0x9c, 0x2d, 0x64, 0xb4, 0x65, 0x95, 0x36, 0x13, 0x2d, 0xbb, 0x7b, 0xd8, 0x50,
	0x62, 0x0c, 0xca, 0xd1, 0xa3, 0x4d, 0xf7, 0xa0, 0xcc, 0x6a, 0xc8, 0x03, 0xd2, 0xd3, 0x2a, 0x99,
	0x07, 0x7c, 0xbd, 0xa0, 0xcf, 0x3b, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x89, 0xf1, 0x22, 0xe4,
	0x5f, 0x01, 0x00, 0x00,
}
